Index: libuv-1.9.0/src/unix/thread.c
===================================================================
--- libuv-1.9.0.orig/src/unix/thread.c	2016-04-28 15:44:44.000000000 +0200
+++ libuv-1.9.0/src/unix/thread.c	2016-04-28 18:42:30.256002560 +0200
@@ -367,11 +367,11 @@
   if (err)
     return -err;
 
-#if !(defined(__ANDROID__) && defined(HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC))
-  err = pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);
-  if (err)
-    goto error2;
-#endif
+// #if !(defined(__ANDROID__) && defined(HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC))
+//   err = pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);
+//   if (err)
+//     goto error2;
+// #endif
 
   err = pthread_cond_init(cond, &attr);
   if (err)
@@ -422,9 +422,16 @@
   ts.tv_nsec = timeout % NANOSEC;
   r = pthread_cond_timedwait_relative_np(cond, mutex, &ts);
 #else
-  timeout += uv__hrtime(UV_CLOCK_PRECISE);
-  ts.tv_sec = timeout / NANOSEC;
-  ts.tv_nsec = timeout % NANOSEC;
+  clock_gettime(CLOCK_REALTIME, &ts);
+  ts.tv_sec += (timeout / NANOSEC);
+  uint64_t ns = ts.tv_nsec + (timeout % NANOSEC);
+  if (ns > NANOSEC) {
+    ts.tv_sec += 1;
+    ts.tv_nsec = (ns - NANOSEC);
+  } else {
+    ts.tv_nsec = ns;
+  }
+
 #if defined(__ANDROID__) && defined(HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC)
   /*
    * The bionic pthread implementation doesn't support CLOCK_MONOTONIC,
