--- a/src/lib_package.c
+++ b/src/lib_package.c
@@ -206,10 +206,10 @@ static const char *mksymname(lua_State *
   return funcname;
 }
 
-static int ll_loadfunc(lua_State *L, const char *path, const char *name, int r)
+static int ll_loadfunc(lua_State *L, const char *path, const char *name, int r, int global)
 {
   void **reg = ll_register(L, path);
-  if (*reg == NULL) *reg = ll_load(L, path, (*name == '*'));
+  if (*reg == NULL) *reg = ll_load(L, path, (*name == '*' || global));
   if (*reg == NULL) {
     return PACKAGE_ERR_LIB;  /* Unable to load library. */
   } else if (*name == '*') {  /* Only load library into global namespace. */
@@ -239,7 +239,7 @@ static int lj_cf_package_loadlib(lua_Sta
 {
   const char *path = luaL_checkstring(L, 1);
   const char *init = luaL_checkstring(L, 2);
-  int st = ll_loadfunc(L, path, init, 1);
+  int st = ll_loadfunc(L, path, init, 1, 1);
   if (st == 0) {  /* no errors? */
     return 1;  /* return the loaded function */
   } else {  /* error; error message is on stack top */
@@ -349,7 +349,7 @@ static int lj_cf_package_loader_c(lua_St
   const char *name = luaL_checkstring(L, 1);
   const char *filename = findfile(L, name, "cpath");
   if (filename == NULL) return 1;  /* library not found in this path */
-  if (ll_loadfunc(L, filename, name, 0) != 0)
+  if (ll_loadfunc(L, filename, name, 0, 1) != 0)
     loaderror(L, filename);
   return 1;  /* library loaded successfully */
 }
@@ -364,7 +364,7 @@ static int lj_cf_package_loader_croot(lu
   lua_pushlstring(L, name, (size_t)(p - name));
   filename = findfile(L, lua_tostring(L, -1), "cpath");
   if (filename == NULL) return 1;  /* root not found */
-  if ((st = ll_loadfunc(L, filename, name, 0)) != 0) {
+  if ((st = ll_loadfunc(L, filename, name, 0, 1)) != 0) {
     if (st != PACKAGE_ERR_FUNC) loaderror(L, filename);  /* real error */
     lua_pushfstring(L, "\n\tno module " LUA_QS " in file " LUA_QS,
 		    name, filename);
